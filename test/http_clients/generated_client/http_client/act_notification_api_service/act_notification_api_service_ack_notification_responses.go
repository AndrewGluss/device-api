// Code generated by go-swagger; DO NOT EDIT.

package act_notification_api_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"gitlab.ozon.dev/qa/classroom-4/act-device-api/test/http_clients/generated_client/models"
)

// ActNotificationAPIServiceAckNotificationReader is a Reader for the ActNotificationAPIServiceAckNotification structure.
type ActNotificationAPIServiceAckNotificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ActNotificationAPIServiceAckNotificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewActNotificationAPIServiceAckNotificationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewActNotificationAPIServiceAckNotificationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewActNotificationAPIServiceAckNotificationOK creates a ActNotificationAPIServiceAckNotificationOK with default headers values
func NewActNotificationAPIServiceAckNotificationOK() *ActNotificationAPIServiceAckNotificationOK {
	return &ActNotificationAPIServiceAckNotificationOK{}
}

/*
ActNotificationAPIServiceAckNotificationOK describes a response with status code 200, with default header values.

A successful response.
*/
type ActNotificationAPIServiceAckNotificationOK struct {
	Payload *models.V1AckNotificationV1Response
}

// IsSuccess returns true when this act notification Api service ack notification o k response has a 2xx status code
func (o *ActNotificationAPIServiceAckNotificationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this act notification Api service ack notification o k response has a 3xx status code
func (o *ActNotificationAPIServiceAckNotificationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this act notification Api service ack notification o k response has a 4xx status code
func (o *ActNotificationAPIServiceAckNotificationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this act notification Api service ack notification o k response has a 5xx status code
func (o *ActNotificationAPIServiceAckNotificationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this act notification Api service ack notification o k response a status code equal to that given
func (o *ActNotificationAPIServiceAckNotificationOK) IsCode(code int) bool {
	return code == 200
}

func (o *ActNotificationAPIServiceAckNotificationOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/notification/ack/{notificationId}][%d] actNotificationApiServiceAckNotificationOK  %+v", 200, o.Payload)
}

func (o *ActNotificationAPIServiceAckNotificationOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/notification/ack/{notificationId}][%d] actNotificationApiServiceAckNotificationOK  %+v", 200, o.Payload)
}

func (o *ActNotificationAPIServiceAckNotificationOK) GetPayload() *models.V1AckNotificationV1Response {
	return o.Payload
}

func (o *ActNotificationAPIServiceAckNotificationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1AckNotificationV1Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActNotificationAPIServiceAckNotificationDefault creates a ActNotificationAPIServiceAckNotificationDefault with default headers values
func NewActNotificationAPIServiceAckNotificationDefault(code int) *ActNotificationAPIServiceAckNotificationDefault {
	return &ActNotificationAPIServiceAckNotificationDefault{
		_statusCode: code,
	}
}

/*
ActNotificationAPIServiceAckNotificationDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ActNotificationAPIServiceAckNotificationDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// Code gets the status code for the act notification Api service ack notification default response
func (o *ActNotificationAPIServiceAckNotificationDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this act notification Api service ack notification default response has a 2xx status code
func (o *ActNotificationAPIServiceAckNotificationDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this act notification Api service ack notification default response has a 3xx status code
func (o *ActNotificationAPIServiceAckNotificationDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this act notification Api service ack notification default response has a 4xx status code
func (o *ActNotificationAPIServiceAckNotificationDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this act notification Api service ack notification default response has a 5xx status code
func (o *ActNotificationAPIServiceAckNotificationDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this act notification Api service ack notification default response a status code equal to that given
func (o *ActNotificationAPIServiceAckNotificationDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *ActNotificationAPIServiceAckNotificationDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/notification/ack/{notificationId}][%d] ActNotificationApiService_AckNotification default  %+v", o._statusCode, o.Payload)
}

func (o *ActNotificationAPIServiceAckNotificationDefault) String() string {
	return fmt.Sprintf("[PUT /api/v1/notification/ack/{notificationId}][%d] ActNotificationApiService_AckNotification default  %+v", o._statusCode, o.Payload)
}

func (o *ActNotificationAPIServiceAckNotificationDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *ActNotificationAPIServiceAckNotificationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
